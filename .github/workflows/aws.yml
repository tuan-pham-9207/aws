name: Analysis and Deploy to Amazon ECS

on:
  push:
    branches: [ "main","develop" ]    

env:
  AWS_REGION: ap-south-1                 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: repository-1          # set this to your Amazon ECR repository name
  ECS_SERVICE: service-2                 # set this to your Amazon ECS service name
  ECS_CLUSTER: cluster-1               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./first-task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: container-4    # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  SONAR_PROJECT_KEY: "tuan-pham-9207_aws"
  SONAR_ORG_KEY: "tuan-pham-9207"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: Development

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD
        utcOffset: "+00:00"    

    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    #- name: Check Code Coverage
    #  run: |
    #    coverage=$(dotnet coverage stats coverage.opencover.xml --threshold 80)
    #    if [ "$coverage" != "success" ]; then
    #      echo "Code coverage is below 80%. Please increase the coverage before merging."
    #      exit 1
    #    fi
    #- name: Upload coverage to SonarQube
    #  run: |
    #    dotnet-coverage sonarqube /k:"${{env.SONAR_PROJECT_KEY}}" /o:"${{env.SONAR_ORG_KEY}}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml" /d:sonar.coverage.exclusions="**/*.Tests/**"

    #- name: Login to Amazon ECR
    #  id: login-ecr
    #  uses: aws-actions/amazon-ecr-login@v1

    #- name: Build, tag, and push image to Amazon ECR
    #  id: build-image
    #  env:
    #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #    IMAGE_TAG: dev${{ steps.current-time.outputs.formattedTime }}_${{ steps.extract_branch.outputs.branch }}_${{ github.run_number }}
    #  run: |
    #    # Build a docker container and
    #    # push it to ECR so that it can
    #    # be deployed to ECS.
    #    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    #- name: Download task definition
    #  run: |
    #      aws ecs describe-task-definition --task-definition task-definition-4 \
    #      --query taskDefinition > task-definition.json
    #- name: Fill in the new image ID in the Amazon ECS task definition
    #  id: task-def
    #  uses: aws-actions/amazon-ecs-render-task-definition@v1
    #  with:
    #    task-definition: task-definition.json
    #    container-name: ${{ env.CONTAINER_NAME }}
    #    image: ${{ steps.build-image.outputs.image }}

    #- name: Deploy Amazon ECS task definition
    #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #  with:
    #    task-definition: ${{ steps.task-def.outputs.task-definition }}
    #    service: ${{ env.ECS_SERVICE }}
    #    cluster: ${{ env.ECS_CLUSTER }}
    #    wait-for-service-stability: true
